<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shorts Performance Dashboard</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            background-color: #1a202c; /* Dark background */
            color: #e2e8f0; /* Light text */
        }

        .no-scrollbar::-webkit-scrollbar {
            display: none;
        }

        .no-scrollbar {
            -ms-overflow-style: none; /* IE and Edge */
            scrollbar-width: none; /* Firefox */
        }
        
        .card {
            background-color: #2d3748; /* Dark card background */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            border-radius: 1rem;
            padding: 1.5rem;
        }
        .table-container {
            background-color: #2d3748;
            border-radius: 1rem;
            padding: 1.5rem;
        }
        
        .table-container table {
            min-width: 600px;
        }

        /* Chart-specific styles to ensure text and lines are visible on dark background */
        .chart-box canvas {
            background-color: #2d3748;
            border-radius: 1rem;
            padding: 1rem;
        }
        
        /* Modal styling */
        .modal {
            background-color: rgba(0, 0, 0, 0.7);
        }
        .modal-content {
            background-color: #2d3748;
            border-radius: 1rem;
            max-height: 90vh;
            overflow-y: auto;
        }
    </style>
</head>
<body class="p-4 sm:p-6 lg:p-8">

<div class="max-w-7xl mx-auto space-y-8">
    <header class="card text-center">
        <h1 class="text-3xl sm:text-4xl font-bold text-gray-50 mb-2">Shorts Performance Dashboard</h1>
        <p class="text-gray-400 mb-4">Analyze your Shorts performance with professional data visualization.</p>
        <div class="file-upload-container flex items-center justify-center space-x-2">
            <label for="file-upload" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg cursor-pointer transition-colors duration-200">
                Upload Data (.xlsx)
            </label>
            <input type="file" id="file-upload" accept=".xlsx" class="hidden">
        </div>
    </header>

    <main class="space-y-8">
        <!-- KPI Cards -->
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <div class="card text-center transform transition-transform duration-300 hover:scale-105">
                <h3 class="text-sm font-semibold text-gray-400 mb-2">Total Titles</h3>
                <p id="kpi-titles" class="text-3xl font-bold text-blue-400">0</p>
            </div>
            <div class="card text-center transform transition-transform duration-300 hover:scale-105">
                <h3 class="text-sm font-semibold text-gray-400 mb-2">Total Clips</h3>
                <p id="kpi-clips" class="text-3xl font-bold text-blue-400">0</p>
            </div>
            <div class="card text-center transform transition-transform duration-300 hover:scale-105">
                <h3 class="text-sm font-semibold text-gray-400 mb-2">Total Views</h3>
                <p id="kpi-views" class="text-3xl font-bold text-blue-400">0</p>
            </div>
            <div class="card text-center transform transition-transform duration-300 hover:scale-105">
                <h3 class="text-sm font-semibold text-gray-400 mb-2">Avg Views per Clip</h3>
                <p id="kpi-avg-views-per-clip" class="text-3xl font-bold text-blue-400">0</p>
            </div>
            <div class="card text-center transform transition-transform duration-300 hover:scale-105">
                <h3 class="text-sm font-semibold text-gray-400 mb-2">Overall Avg/View (Conversion)</h3>
                <p id="kpi-avg-per-view-conversion" class="text-3xl font-bold text-blue-400">0.000</p>
            </div>
        </div>
        
        <!-- Insights -->
        <div class="card">
            <h2 class="text-xl font-semibold mb-4">Key Insights</h2>
            <div id="insights-text" class="text-gray-400">
                <p>Upload an Excel file to generate insights.</p>
            </div>
        </div>

        <!-- Filters & Controls -->
        <div class="card grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 items-center">
            <div class="flex flex-col">
                <label for="search-title" class="text-sm font-medium mb-1">Search Title:</label>
                <input type="text" id="search-title" placeholder="e.g., Cool Vids" class="p-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="flex flex-col">
                <label for="min-views" class="text-sm font-medium mb-1">Min Views:</label>
                <input type="number" id="min-views" value="0" class="p-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="flex flex-col">
                <label for="max-views" class="text-sm font-medium mb-1">Max Views:</label>
                <input type="number" id="max-views" value="999999999" class="p-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="flex flex-col">
                <label for="min-avg-per-view" class="text-sm font-medium mb-1">Min Avg/View (Conversion):</label>
                <input type="number" id="min-avg-per-view" value="0" step="0.001" class="p-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="flex flex-col">
                <label for="sort-by" class="text-sm font-medium mb-1">Sort by:</label>
                <select id="sort-by" class="p-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="total_views">Total Views</option>
                    <option value="avg_views_per_clip">Avg Views/Clip</option>
                    <option value="avg_per_view_conversion">Avg/View (Conversion)</option>
                    <option value="total_likes">Total Likes</option>
                    <option value="total_watched_clicks">Total Watched Clicks</option>
                </select>
            </div>
            <div class="flex flex-col">
                <label for="top-n" class="text-sm font-medium mb-1">Top N:</label>
                <input type="number" id="top-n" value="10" min="1" max="100" class="p-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="relative">
                <label class="text-sm font-medium mb-1 block">Comparison</label>
                <div class="p-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-400 cursor-pointer" id="comparison-select-box">
                    <span>Compare Titles</span>
                </div>
                <div class="options-container hidden absolute top-full left-0 right-0 bg-gray-700 border border-gray-600 rounded-b-lg shadow-lg z-10 max-h-48 overflow-y-auto no-scrollbar" id="comparison-options"></div>
            </div>
        </div>

        <!-- Comparison Panel -->
        <div id="comparison-panel" class="card hidden">
            <h2 class="text-xl font-semibold mb-4">Comparison Panel</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="comparison-cards"></div>
        </div>

        <!-- Charts -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div class="chart-box card">
                <canvas id="viewsChart"></canvas>
            </div>
            <div class="chart-box card">
                <canvas id="avgPerViewChart"></canvas>
            </div>
            <div class="chart-box card">
                <canvas id="scatterChart"></canvas>
            </div>
            <div class="chart-box card">
                <canvas id="stackedBarChart"></canvas>
            </div>
        </div>

        <!-- Top Performers Table -->
        <div class="table-container overflow-x-auto">
            <h2 class="text-xl font-semibold mb-4">Top Performers</h2>
            <table id="profile-table" class="profile-table w-full text-sm text-left rtl:text-right text-gray-400 mb-4">
                <thead class="text-xs text-gray-200 uppercase bg-gray-700">
                    <tr>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="title">Title</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="clips">Clips</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="total_views">Total Views</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="total_likes">Total Likes</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="total_watched_clicks">Total Watched Clicks</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="avg_views_per_clip">Avg Views/Clip</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="avg_per_view_conversion">Avg/View (Conversion)</th>
                    </tr>
                </thead>
                <tbody id="table-body" class="bg-gray-800 divide-y divide-gray-700"></tbody>
            </table>
            <div class="pagination-controls flex justify-center space-x-2" id="pagination-controls"></div>
        </div>
        
        <!-- Bottom 10 Performers Chart & Table -->
        <div class="chart-box card">
            <canvas id="bottom10ViewsChart"></canvas>
        </div>

        <div class="table-container overflow-x-auto">
            <h2 class="text-xl font-semibold mb-4">Bottom 10 Performers</h2>
            <table id="bottom-10-table" class="profile-table w-full text-sm text-left rtl:text-right text-gray-400 mb-4">
                <thead class="text-xs text-gray-200 uppercase bg-gray-700">
                    <tr>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="title">Title</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="clips">Clips</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="total_views">Total Views</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="total_likes">Total Likes</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="total_watched_clicks">Total Watched Clicks</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="avg_views_per_clip">Avg Views/Clip</th>
                        <th scope="col" class="px-6 py-3 cursor-pointer" data-column="avg_per_view_conversion">Avg/View (Conversion)</th>
                    </tr>
                </thead>
                <tbody id="bottom-10-table-body" class="bg-gray-800 divide-y divide-gray-700"></tbody>
            </table>
        </div>
    </main>
    
    <!-- Drilldown Modal -->
    <div id="drilldown-modal" class="hidden modal fixed inset-0 z-50 flex items-center justify-center p-4">
        <div class="modal-content card max-w-4xl w-full">
            <div class="flex justify-between items-start mb-4">
                <h2 id="drilldown-profile-title" class="text-2xl font-bold"></h2>
                <button class="close-button text-gray-400 hover:text-gray-200 transition-colors duration-200 text-3xl leading-none">&times;</button>
            </div>

            <div class="modal-controls flex flex-wrap gap-4 mb-6">
                <div class="flex items-center space-x-2">
                    <label for="drilldown-min-views" class="text-sm font-medium">Min Views:</label>
                    <input type="number" id="drilldown-min-views" value="0" class="p-2 border border-gray-600 rounded-lg w-24 bg-gray-700 text-gray-50">
                </div>
                <div class="flex items-center space-x-2">
                    <label for="drilldown-min-likes" class="text-sm font-medium">Min Likes:</label>
                    <input type="number" id="drilldown-min-likes" value="0" class="p-2 border border-gray-600 rounded-lg w-24 bg-gray-700 text-gray-50">
                </div>
                <div class="modal-export-buttons">
                    <button id="export-modal-csv" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
                        Export to CSV
                    </button>
                </div>
            </div>

            <div class="drilldown-chart-container mb-6 card">
                <canvas id="drilldownChart"></canvas>
            </div>

            <div id="drilldown-table-container" class="overflow-x-auto">
                <table class="modal-table w-full text-sm text-left rtl:text-right text-gray-400">
                    <thead class="text-xs text-gray-200 uppercase bg-gray-700">
                        <tr>
                            <th scope="col" class="px-6 py-3">Clip Name</th>
                            <th scope="col" class="px-6 py-3">Views</th>
                            <th scope="col" class="px-6 py-3">Likes</th>
                            <th scope="col" class="px-6 py-3">Watched Clicks</th>
                        </tr>
                    </thead>
                    <tbody id="drilldown-table-body" class="bg-gray-800 divide-y divide-gray-700"></tbody>
                </table>
            </div>
        </div>
    </div>

    <footer>
        <div class="flex flex-col sm:flex-row justify-between items-center card mt-8">
            <p class="text-gray-400 text-sm mb-4 sm:mb-0">Data source: User uploaded Excel data. "Titles" column mapped to "profile".</p>
            <div class="export-buttons flex flex-wrap justify-center sm:justify-end gap-4">
                <button id="export-csv" class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
                    Export Table to CSV
                </button>
                <button id="export-png" class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
                    Export Charts to PNG
                </button>
            </div>
        </div>
    </footer>
</div>

<script>
    // Sample data to load on page initialization
    const sampleData = [
        {"Titles": "Holm Esref", "ArabicTitle": "محتوى عربي 1", "Media Played": "150000", "Likes": 1500, "Watched Clicked": 15000},
        {"Titles": "Holm Esref", "ArabicTitle": "محتوى عربي 2", "Media Played": "174892", "Likes": 1748, "Watched Clicked": 17489},
        {"Titles": "Titles", "ArabicTitle": "محتوى عربي", "Media Played": "15K", "Likes": 500, "Watched Clicked": 250},
        {"Titles": "Titles", "ArabicTitle": "محتوى جديد", "Media Played": "22,000", "Likes": 800, "Watched Clicked": 400},
        {"Titles": "Clips Hub", "ArabicTitle": "قناة شورتس", "Media Played": "35K", "Likes": 1200, "Watched Clicked": 700},
        {"Titles": "Clips Hub", "ArabicTitle": "مركز المقاطع", "Media Played": "18,000", "Likes": 600, "Watched Clicked": 300},
        {"Titles": "Clips Hub", "ArabicTitle": "مقاطع يومية", "Media Played": "45K", "Likes": 1500, "Watched Clicked": 900},
        {"Titles": "Viral Shorts", "ArabicTitle": "شورتس فيروسية", "Media Played": "75,000", "Likes": 2500, "Watched Clicked": 1500},
        {"Titles": "Titles", "ArabicTitle": "المزيد من الشورتس", "Media Played": "5,000", "Likes": 100, "Watched Clicked": 50},
        {"Titles": "Cool Vids", "ArabicTitle": "فيديوهات رائعة", "Media Played": "800", "Likes": 10, "Watched Clicked": 10},
        {"Titles": "Cool Vids", "ArabicTitle": "فيديو قصير", "Media Played": "1.2K", "Likes": 50, "Watched Clicked": 20}
    ];

    let allClipsData = [];
    let aggregatedData = [];
    let charts = {};
    let selectedTitles = [];
    let currentDrilldownClips = []; // Stores the clips for the currently open drilldown modal
    const pageSize = 10;
    let currentPage = 1;

    document.addEventListener('DOMContentLoaded', () => {
        // Initial rendering with sample data
        updateDashboard(sampleData);

        // Event listeners
        document.getElementById('file-upload').addEventListener('change', handleFileUpload);
        document.getElementById('search-title').addEventListener('input', applyFilters);
        document.getElementById('min-views').addEventListener('input', applyFilters);
        document.getElementById('max-views').addEventListener('input', applyFilters);
        document.getElementById('min-avg-per-view').addEventListener('input', applyFilters);
        document.getElementById('sort-by').addEventListener('change', applyFilters);
        document.getElementById('top-n').addEventListener('input', applyFilters);
        document.getElementById('export-csv').addEventListener('click', exportTableToCsv);
        document.getElementById('export-png').addEventListener('click', exportChartsToPng);
        document.getElementById('profile-table').addEventListener('click', handleTableSortOrDrilldown);
        document.getElementById('bottom-10-table').addEventListener('click', handleTableSortOrDrilldown);
        document.getElementById('comparison-select-box').addEventListener('click', toggleComparisonOptions);
        document.getElementById('comparison-options').addEventListener('change', handleComparisonSelect);

        // Drilldown Modal Event Listeners
        document.getElementById('drilldown-min-views').addEventListener('input', applyDrilldownFilters);
        document.getElementById('drilldown-min-likes').addEventListener('input', applyDrilldownFilters);
        document.getElementById('export-modal-csv').addEventListener('click', exportModalTableToCsv);

        document.querySelector('.close-button').addEventListener('click', () => {
            document.getElementById('drilldown-modal').classList.add('hidden');
        });
        window.addEventListener('click', (event) => {
            const modal = document.getElementById('drilldown-modal');
            if (event.target === modal) {
                modal.classList.add('hidden');
            }
        });
    });

    /**
     * Helper function to safely parse a string or number value into a float.
     * It handles commas and common suffixes like K, M, and B.
     * @param {*} value The value to parse.
     * @returns {number} The parsed number, or 0 if parsing fails.
     */
    function cleanNumber(value) {
        if (typeof value === 'number') {
            return value;
        }
        if (typeof value !== 'string') {
            return 0;
        }

        let cleaned = value.replace(/,/g, '');
        let multiplier = 1;

        if (cleaned.toUpperCase().endsWith('K')) {
            multiplier = 1000;
            cleaned = cleaned.slice(0, -1);
        } else if (cleaned.toUpperCase().endsWith('M')) {
            multiplier = 1000000;
            cleaned = cleaned.slice(0, -1);
        } else if (cleaned.toUpperCase().endsWith('B')) {
            multiplier = 1000000000;
            cleaned = cleaned.slice(0, -1);
        }

        const parsed = parseFloat(cleaned);
        return isNaN(parsed) ? 0 : parsed * multiplier;
    }


    /**
     * Handles file upload and parses the Excel data.
     * @param {Event} event The file change event.
     */
    async function handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
            const reader = new FileReader();
            reader.onload = async (e) => {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                let combinedData = [];
                
                // Read from Dovies and FCCE sheets
                const sheetNames = ["Dovies", "FCCE"];
                sheetNames.forEach(sheetName => {
                    const sheet = workbook.Sheets[sheetName];
                    if (sheet) {
                        const json = XLSX.utils.sheet_to_json(sheet);
                        combinedData = combinedData.concat(json);
                    }
                });
                
                // Handle empty data case
                if (combinedData.length === 0) {
                     // Using a simple message box instead of alert()
                    const messageBox = document.createElement('div');
                    messageBox.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);padding:20px;background:#fff;border-radius:10px;box-shadow:0 0 10px rgba(0,0,0,0.5);z-index:9999;';
                    messageBox.textContent = "No data found in 'Dovies' or 'FCCE' sheets. Please check your Excel file.";
                    document.body.appendChild(messageBox);
                    setTimeout(() => messageBox.remove(), 2000);
                     return;
                }

                allClipsData = combinedData;
                updateDashboard(allClipsData);
            };
            reader.readAsArrayBuffer(file);
        } catch (error) {
            console.error('Error reading or parsing file:', error);
             // Using a simple message box instead of alert()
            const messageBox = document.createElement('div');
            messageBox.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);padding:20px;background:#fff;border-radius:10px;box-shadow:0 0 10px rgba(0,0,0,0.5);z-index:9999;';
            messageBox.textContent = 'Error processing file. Please ensure it is a valid .xlsx file.';
            document.body.appendChild(messageBox);
            setTimeout(() => messageBox.remove(), 2000);
        }
    }

    /**
     * Updates all components of the dashboard.
     * @param {Array<Object>} data The raw clips data.
     */
    function updateDashboard(data) {
        allClipsData = data;
        aggregatedData = groupByTitle(data);
        applyFilters();
        renderComparisonOptions();
    }

    /**
     * Groups clips data by title and computes aggregate metrics.
     * @param {Array<Object>} data The raw clips data.
     * @returns {Array<Object>} The aggregated titles data.
     */
    function groupByTitle(data) {
        const titlesMap = new Map();
        data.forEach(clip => {
            const titleName = clip.Titles || 'Unknown';
            if (!titlesMap.has(titleName)) {
                titlesMap.set(titleName, {
                    title: titleName,
                    clips: 0,
                    total_views: 0,
                    total_likes: 0,
                    total_watched_clicks: 0,
                    clips_list: []
                });
            }
            const title = titlesMap.get(titleName);
            title.clips += 1;
            title.total_views += cleanNumber(clip['Media Played']);
            title.total_likes += cleanNumber(clip['Likes']);
            title.total_watched_clicks += cleanNumber(clip['Watched Clicked']);
            title.clips_list.push(clip);
        });

        const aggregatedTitles = Array.from(titlesMap.values());
        aggregatedTitles.forEach(title => {
            title.avg_views_per_clip = (title.clips > 0) ? (title.total_views / title.clips) : 0;
            title.avg_per_view_conversion = (title.total_views > 0) ? (title.total_watched_clicks / title.total_views) : 0;
        });

        return aggregatedTitles;
    }

    /**
     * Applies filters, sorts, and renders the dashboard elements.
     */
    function applyFilters() {
        const searchTerm = document.getElementById('search-title').value.toLowerCase();
        const minViews = parseFloat(document.getElementById('min-views').value) || 0;
        const maxViews = parseFloat(document.getElementById('max-views').value) || Infinity;
        const minAvgPerView = parseFloat(document.getElementById('min-avg-per-view').value) || 0;
        const sortBy = document.getElementById('sort-by').value;
        const topN = parseInt(document.getElementById('top-n').value) || 10;

        let filteredData = aggregatedData.filter(title => {
            const titleName = title.title || '';
            const titleViews = title.total_views || 0;
            const titleAvg = title.avg_per_view_conversion || 0;
            return titleName.toLowerCase().includes(searchTerm) &&
                   titleViews >= minViews &&
                   titleViews <= maxViews &&
                   titleAvg >= minAvgPerView;
        });

        // Sort data
        filteredData.sort((a, b) => {
            if (sortBy === 'total_views') {
                return b.total_views - a.total_views;
            } else if (sortBy === 'avg_per_view_conversion') {
                return b.avg_per_view_conversion - a.avg_per_view_conversion;
            } else if (sortBy === 'avg_views_per_clip') {
                return b.avg_views_per_clip - a.avg_views_per_clip;
            } else if (sortBy === 'total_likes') {
                return b.total_likes - a.total_likes;
            } else if (sortBy === 'total_watched_clicks') {
                return b.total_watched_clicks - a.total_watched_clicks;
            }
        });

        const topNData = filteredData.slice(0, topN);

        renderKPIs();
        renderInsights(filteredData);
        renderCharts(topNData);
        renderTopPerformersTable(filteredData);
        renderBottomPerformersTable(filteredData);
    }

    /**
     * Renders the key performance indicator (KPI) cards.
     */
    function renderKPIs() {
        const totalTitles = aggregatedData.length;
        const totalClips = allClipsData.length;
        const totalViews = aggregatedData.reduce((sum, p) => sum + p.total_views, 0);
        const totalClicks = aggregatedData.reduce((sum, p) => sum + p.total_watched_clicks, 0);
        const overallAvgPerViewConversion = (totalViews > 0) ? (totalClicks / totalViews) : 0;
        const overallAvgViewsPerClip = (totalClips > 0) ? (totalViews / totalClips) : 0;

        document.getElementById('kpi-titles').textContent = formatNumber(totalTitles);
        document.getElementById('kpi-clips').textContent = formatNumber(totalClips);
        document.getElementById('kpi-views').textContent = formatNumber(totalViews);
        document.getElementById('kpi-avg-views-per-clip').textContent = formatNumber(Math.round(overallAvgViewsPerClip));
        document.getElementById('kpi-avg-per-view-conversion').textContent = overallAvgPerViewConversion.toFixed(3);
    }
    
    /**
     * Renders the auto-generated insights as a bulleted list.
     * @param {Array<Object>} data The filtered and sorted data.
     */
    function renderInsights(data) {
        const insightsContainer = document.getElementById('insights-text');
        insightsContainer.innerHTML = '';
        
        if (data.length === 0) {
            insightsContainer.innerHTML = `<p class="text-gray-500">Not enough data to generate insights.</p>`;
            return;
        }

        const sortedByViews = [...data].sort((a, b) => b.total_views - a.total_views);
        const sortedByAvgConversion = [...data].sort((a, b) => b.avg_per_view_conversion - a.avg_per_view_conversion);
        const sortedByLikes = [...data].sort((a, b) => b.total_likes - a.total_likes);

        const topViewsTitle = sortedByViews[0] ? `<b>${sortedByViews[0].title}</b> with ${formatNumber(sortedByViews[0].total_views)} views` : 'N/A';
        const topConversionTitle = sortedByAvgConversion[0] ? `<b>${sortedByAvgConversion[0].title}</b> with an average conversion of ${sortedByAvgConversion[0].avg_per_view_conversion.toFixed(3)}` : 'N/A';
        const topLikesTitle = sortedByLikes[0] ? `<b>${sortedByLikes[0].title}</b> with ${formatNumber(sortedByLikes[0].total_likes)} likes` : 'N/A';
        const lowestConversionTitles = sortedByAvgConversion.slice(-5).reverse().map(p => p.title).join(', ');

        const totalViews = sortedByViews.reduce((sum, p) => sum + p.total_views, 0);
        let cumulativeViews = 0;
        let topXCount = 0;
        for (const title of sortedByViews) {
            cumulativeViews += title.total_views;
            topXCount++;
            if (cumulativeViews / totalViews >= 0.8) {
                break;
            }
        }
        
        const insightsHtml = `
            <ul class="list-disc list-inside space-y-2 text-gray-400">
                <li>The most viewed title is ${topViewsTitle}.</li>
                <li>The title with the highest conversion rate (Watched Clicks per View) is ${topConversionTitle}.</li>
                <li>The most liked title is ${topLikesTitle}.</li>
                <li>Titles with the lowest conversion rates include: ${lowestConversionTitles}. Consider analyzing these to see why they don't engage viewers effectively.</li>
                <li>According to the 80/20 rule, approximately <b>${topXCount} titles</b>, or <b>${((topXCount / aggregatedData.length) * 100).toFixed(0)}%</b> of all titles, account for 80% of all total views.</li>
            </ul>
        `;
        
        insightsContainer.innerHTML = insightsHtml;
    }

    /**
     * Renders all charts using Chart.js.
     * @param {Array<Object>} data The filtered and sorted data for charts.
     */
    function renderCharts(data) {
        const labels = data.map(p => p.title);
        const views = data.map(p => p.total_views);
        const avgViewsPerClip = data.map(p => p.avg_views_per_clip);
        const clicks = data.map(p => p.total_watched_clicks);
        const likes = data.map(p => p.total_likes);

        const chartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { labels: { color: '#a0aec0' } },
                title: { display: true, color: '#e2e8f0', font: { size: 16 } },
                tooltip: { backgroundColor: 'rgba(45, 55, 72, 0.9)', titleColor: '#e2e8f0', bodyColor: '#cbd5e0', borderColor: '#4a5568', borderWidth: 1 }
            },
            scales: {
                x: {
                    ticks: { color: '#a0aec0' },
                    grid: { color: '#4a5568' },
                    title: { display: true, color: '#e2e8f0' }
                },
                y: {
                    ticks: { color: '#a0aec0', callback: formatNumber },
                    grid: { color: '#4a5568' },
                    title: { display: true, color: '#e2e8f0' }
                }
            }
        };

        // Bar Chart: Titles by Total Views
        if (charts.viewsChart) charts.viewsChart.destroy();
        const viewsCtx = document.getElementById('viewsChart').getContext('2d');
        charts.viewsChart = new Chart(viewsCtx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total Views',
                    data: views,
                    backgroundColor: '#4299e1',
                    borderColor: '#2b6cb0',
                    borderWidth: 1
                }]
            },
            options: { ...chartOptions, plugins: { ...chartOptions.plugins, title: { ...chartOptions.plugins.title, text: `Top ${data.length} Titles by Total Views` } }, indexAxis: 'y' }
        });

        // Bar Chart: Titles by Avg Views per Clip
        if (charts.avgPerViewChart) charts.avgPerViewChart.destroy();
        const avgsCtx = document.getElementById('avgPerViewChart').getContext('2d');
        charts.avgPerViewChart = new Chart(avgsCtx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Avg Views per Clip',
                    data: avgViewsPerClip,
                    backgroundColor: '#4fd1c5',
                    borderColor: '#38b2ac',
                    borderWidth: 1
                }]
            },
            options: { ...chartOptions, plugins: { ...chartOptions.plugins, title: { ...chartOptions.plugins.title, text: `Top ${data.length} Titles by Avg Views per Clip` } }, indexAxis: 'y' }
        });

        // Bar Chart: Total Watched Clicks
        if (charts.scatterChart) charts.scatterChart.destroy();
        const scatterCtx = document.getElementById('scatterChart').getContext('2d');
        charts.scatterChart = new Chart(scatterCtx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total Watched Clicks',
                    data: clicks,
                    backgroundColor: '#fc8181',
                    borderColor: '#e53e3e',
                    borderWidth: 1
                }]
            },
            options: { ...chartOptions, plugins: { ...chartOptions.plugins, title: { ...chartOptions.plugins.title, text: 'Total Watched Clicks' } }, indexAxis: 'y' }
        });

        // Stacked Bar Chart: Likes vs Watched Clicks
        if (charts.stackedBarChart) charts.stackedBarChart.destroy();
        const stackedCtx = document.getElementById('stackedBarChart').getContext('2d');
        const top10Titles = data.slice(0, 10);
        charts.stackedBarChart = new Chart(stackedCtx, {
            type: 'bar',
            data: {
                labels: top10Titles.map(t => t.title),
                datasets: [
                    {
                        label: 'Likes',
                        data: top10Titles.map(t => t.total_likes),
                        backgroundColor: '#667eea',
                        stack: 'metrics'
                    },
                    {
                        label: 'Watched Clicks',
                        data: top10Titles.map(t => t.total_watched_clicks),
                        backgroundColor: '#9f7aea',
                        stack: 'metrics'
                    }
                ]
            },
            options: {
                ...chartOptions,
                plugins: { ...chartOptions.plugins, title: { ...chartOptions.plugins.title, text: 'Likes vs. Watched Clicks (Top 10 Titles)' } },
                scales: {
                    x: { ...chartOptions.scales.x, stacked: true },
                    y: { ...chartOptions.scales.y, stacked: true }
                }
            }
        });
        
        // New Chart: Bottom 10 Titles by Total Views
        const bottom10Data = [...aggregatedData].sort((a, b) => a.total_views - b.total_views).slice(0, 10);
        if (charts.bottom10ViewsChart) charts.bottom10ViewsChart.destroy();
        const bottom10Ctx = document.getElementById('bottom10ViewsChart').getContext('2d');
        charts.bottom10ViewsChart = new Chart(bottom10Ctx, {
            type: 'bar',
            data: {
                labels: bottom10Data.map(p => p.title),
                datasets: [{
                    label: 'Total Views',
                    data: bottom10Data.map(p => p.total_views),
                    backgroundColor: '#f56565',
                    borderColor: '#c53030',
                    borderWidth: 1
                }]
            },
            options: { ...chartOptions, plugins: { ...chartOptions.plugins, title: { ...chartOptions.plugins.title, text: `Bottom 10 Titles by Total Views` } }, indexAxis: 'y' }
        });
    }

    /**
     * Renders the main profiles table.
     * @param {Array<Object>} data The filtered and sorted data for the table.
     */
    function renderTopPerformersTable(data) {
        const tableBody = document.getElementById('table-body');
        tableBody.innerHTML = '';
        const start = (currentPage - 1) * pageSize;
        const end = start + pageSize;
        const pageData = data.slice(start, end);

        pageData.forEach(title => {
            const row = document.createElement('tr');
            row.classList.add('bg-gray-800', 'border-b', 'border-gray-700', 'hover:bg-gray-700', 'transition-colors', 'duration-150');
            row.innerHTML = `
                <td class="px-6 py-4 font-medium text-gray-100 whitespace-nowrap"><a href="#" class="drilldown-link text-blue-400 hover:underline" data-title="${title.title}">${title.title}</a></td>
                <td class="px-6 py-4">${formatNumber(title.clips)}</td>
                <td class="px-6 py-4">${formatNumber(title.total_views)}</td>
                <td class="px-6 py-4">${formatNumber(title.total_likes)}</td>
                <td class="px-6 py-4">${formatNumber(title.total_watched_clicks)}</td>
                <td class="px-6 py-4">${formatNumber(Math.round(title.avg_views_per_clip))}</td>
                <td class="px-6 py-4">${title.avg_per_view_conversion.toFixed(3)}</td>
            `;
            tableBody.appendChild(row);
        });

        const totalPages = Math.ceil(data.length / pageSize);
        const paginationControls = document.getElementById('pagination-controls');
        paginationControls.innerHTML = '';
        if (totalPages > 1) {
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.className = `py-2 px-4 rounded-lg font-medium transition-colors duration-200 ${i === currentPage ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`;
                button.onclick = () => {
                    currentPage = i;
                    renderTopPerformersTable(data);
                };
                paginationControls.appendChild(button);
            }
        }
    }
    
    /**
     * Renders the bottom 10 performers table.
     * @param {Array<Object>} data The filtered and sorted data.
     */
    function renderBottomPerformersTable(data) {
        const tableBody = document.getElementById('bottom-10-table-body');
        tableBody.innerHTML = '';
        const sortBy = document.getElementById('sort-by').value;

        const sortedData = [...data].sort((a, b) => {
            if (a[sortBy] < b[sortBy]) return -1;
            if (a[sortBy] > b[sortBy]) return 1;
            return 0;
        });

        const bottom10 = sortedData.slice(0, 10);

        bottom10.forEach(title => {
            const row = document.createElement('tr');
            row.classList.add('bg-gray-800', 'border-b', 'border-gray-700', 'hover:bg-gray-700', 'transition-colors', 'duration-150');
            row.innerHTML = `
                <td class="px-6 py-4 font-medium text-gray-100 whitespace-nowrap"><a href="#" class="drilldown-link text-blue-400 hover:underline" data-title="${title.title}">${title.title}</a></td>
                <td class="px-6 py-4">${formatNumber(title.clips)}</td>
                <td class="px-6 py-4">${formatNumber(title.total_views)}</td>
                <td class="px-6 py-4">${formatNumber(title.total_likes)}</td>
                <td class="px-6 py-4">${formatNumber(title.total_watched_clicks)}</td>
                <td class="px-6 py-4">${formatNumber(Math.round(title.avg_views_per_clip))}</td>
                <td class="px-6 py-4">${title.avg_per_view_conversion.toFixed(3)}</td>
            `;
            tableBody.appendChild(row);
        });
    }

    /**
     * Handles table header sorting and row drilldown.
     * @param {Event} event The click event on the table.
     */
    function handleTableSortOrDrilldown(event) {
        const target = event.target;
        if (target.tagName === 'TH') {
            const tableId = target.closest('table').id;
            const column = target.getAttribute('data-column');
            if (column) {
                const currentSort = target.classList.contains('asc') ? 'asc' : target.classList.contains('desc') ? 'desc' : '';
                
                document.querySelectorAll('.profile-table th').forEach(th => th.classList.remove('asc', 'desc'));
                
                let sortDirection = 'asc';
                if (currentSort === 'asc') {
                    sortDirection = 'desc';
                    target.classList.add('desc');
                } else {
                    target.classList.add('asc');
                }
                
                const sortedData = [...aggregatedData].sort((a, b) => {
                    const aVal = a[column];
                    const bVal = b[column];
                    if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;
                    if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;
                    return 0;
                });
                
                aggregatedData = sortedData;
                applyFilters();
            }
        } else if (target.classList.contains('drilldown-link')) {
            event.preventDefault();
            const titleName = target.getAttribute('data-title');
            showDrilldown(titleName);
        }
    }

    /**
     * Displays a modal with detailed clips for a given title.
     * @param {string} titleName The name of the title to show details for.
     */
    function showDrilldown(titleName) {
        const titleData = aggregatedData.find(t => t.title === titleName);
        if (!titleData) return;

        currentDrilldownClips = titleData.clips_list;

        document.getElementById('drilldown-profile-title').textContent = `Details for ${titleName}`;
        document.getElementById('drilldown-min-views').value = 0;
        document.getElementById('drilldown-min-likes').value = 0;
        
        applyDrilldownFilters();

        document.getElementById('drilldown-modal').classList.remove('hidden');
    }

    /**
     * Filters the drilldown clips and renders the modal's content.
     */
    function applyDrilldownFilters() {
        const minViews = parseFloat(document.getElementById('drilldown-min-views').value) || 0;
        const minLikes = parseFloat(document.getElementById('drilldown-min-likes').value) || 0;
        
        const filteredClips = currentDrilldownClips.filter(clip => {
            return cleanNumber(clip['Media Played']) >= minViews && cleanNumber(clip['Likes']) >= minLikes;
        });

        renderDrilldownContent(filteredClips);
    }
    
    /**
     * Renders the table and charts inside the drilldown modal.
     * @param {Array<Object>} clips The filtered clips to render.
     */
    function renderDrilldownContent(clips) {
        // Render the table
        const drilldownTableBody = document.getElementById('drilldown-table-body');
        drilldownTableBody.innerHTML = '';
        clips.forEach(clip => {
            const row = document.createElement('tr');
            row.classList.add('bg-gray-800', 'border-b', 'border-gray-700', 'hover:bg-gray-700', 'transition-colors', 'duration-150');
            row.innerHTML = `
                <td class="px-6 py-4 font-medium text-gray-100 whitespace-nowrap">${clip.ArabicTitle}</td>
                <td class="px-6 py-4">${formatNumber(cleanNumber(clip['Media Played']))}</td>
                <td class="px-6 py-4">${formatNumber(cleanNumber(clip['Likes']))}</td>
                <td class="px-6 py-4">${formatNumber(cleanNumber(clip['Watched Clicked']))}</td>
            `;
            drilldownTableBody.appendChild(row);
        });

        // Render the chart
        if (charts.drilldownChart) charts.drilldownChart.destroy();
        const drilldownCtx = document.getElementById('drilldownChart').getContext('2d');
        const drilldownOptions = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                title: { display: true, color: '#e2e8f0', text: 'Views per Clip' },
                tooltip: { backgroundColor: 'rgba(45, 55, 72, 0.9)', titleColor: '#e2e8f0', bodyColor: '#cbd5e0', borderColor: '#4a5568', borderWidth: 1 }
            },
            scales: {
                x: {
                    ticks: { color: '#a0aec0', maxRotation: 45, minRotation: 45 },
                    grid: { color: '#4a5568' },
                    title: { display: true, color: '#e2e8f0', text: 'Clip Name' }
                },
                y: {
                    beginAtZero: true,
                    ticks: { color: '#a0aec0', callback: formatNumber },
                    grid: { color: '#4a5568' },
                    title: { display: true, color: '#e2e8f0', text: 'Views' }
                }
            }
        };

        charts.drilldownChart = new Chart(drilldownCtx, {
            type: 'bar',
            data: {
                labels: clips.map(c => c.ArabicTitle),
                datasets: [{
                    label: 'Views per Clip',
                    data: clips.map(c => cleanNumber(c['Media Played'])),
                    backgroundColor: '#4299e1',
                    borderColor: '#2b6cb0',
                    borderWidth: 1
                }]
            },
            options: drilldownOptions
        });
    }

    /**
     * Toggles the visibility of the comparison multi-select options.
     */
    function toggleComparisonOptions() {
        const optionsContainer = document.getElementById('comparison-options');
        optionsContainer.classList.toggle('hidden');
    }

    /**
     * Renders the options for the title comparison multi-select.
     */
    function renderComparisonOptions() {
        const optionsContainer = document.getElementById('comparison-options');
        optionsContainer.innerHTML = '';
        aggregatedData.forEach(title => {
            const label = document.createElement('label');
            label.className = 'block p-2 cursor-pointer hover:bg-gray-600 transition-colors duration-150 rounded-lg';
            label.innerHTML = `<input type="checkbox" value="${title.title}" class="mr-2 rounded-md bg-gray-700 border-gray-600 checked:bg-blue-600 checked:border-transparent focus:ring-blue-500 focus:ring-offset-2"> ${title.title}`;
            optionsContainer.appendChild(label);
        });
        document.getElementById('comparison-panel').classList.add('hidden');
        selectedTitles = [];
        document.getElementById('comparison-select-box').querySelector('span').textContent = 'Compare Titles';
    }

    /**
     * Handles the change event for the comparison multi-select checkboxes.
     */
    function handleComparisonSelect(event) {
        selectedTitles = Array.from(document.querySelectorAll('#comparison-options input[type="checkbox"]:checked')).map(cb => cb.value);
        
        const selectBoxSpan = document.getElementById('comparison-select-box').querySelector('span');
        if (selectedTitles.length > 0) {
            selectBoxSpan.textContent = `Comparing (${selectedTitles.length})`;
            renderComparisonPanel();
        } else {
            selectBoxSpan.textContent = 'Compare Titles';
            document.getElementById('comparison-panel').classList.add('hidden');
        }
    }

    /**
     * Renders the comparison panel with selected titles.
     */
    function renderComparisonPanel() {
        const comparisonCardsContainer = document.getElementById('comparison-cards');
        comparisonCardsContainer.innerHTML = '';

        if (selectedTitles.length === 0) {
            document.getElementById('comparison-panel').classList.add('hidden');
            return;
        }

        document.getElementById('comparison-panel').classList.remove('hidden');

        const selectedData = selectedTitles.map(title => aggregatedData.find(d => d.title === title)).filter(Boolean);
        if (selectedData.length === 0) {
            document.getElementById('comparison-panel').classList.add('hidden');
            return;
        }

        const maxViews = Math.max(...selectedData.map(d => d.total_views));
        const maxLikes = Math.max(...selectedData.map(d => d.total_likes));
        const maxClicks = Math.max(...selectedData.map(d => d.total_watched_clicks));
        const maxAvgViews = Math.max(...selectedData.map(d => d.avg_views_per_clip));
        const maxAvgConversion = Math.max(...selectedData.map(d => d.avg_per_view_conversion));

        selectedData.forEach(title => {
            const card = document.createElement('div');
            card.className = 'card bg-gray-800';
            card.innerHTML = `
                <h4 class="text-lg font-semibold mb-3">${title.title}</h4>
                <div class="space-y-2 text-sm text-gray-400">
                    <div class="flex justify-between items-center">
                        <span>Total Views:</span>
                        <span class="font-bold text-gray-100 ${title.total_views === maxViews ? 'text-blue-400' : ''}">${formatNumber(title.total_views)}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span>Total Likes:</span>
                        <span class="font-bold text-gray-100 ${title.total_likes === maxLikes ? 'text-blue-400' : ''}">${formatNumber(title.total_likes)}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span>Total Watched Clicks:</span>
                        <span class="font-bold text-gray-100 ${title.total_watched_clicks === maxClicks ? 'text-blue-400' : ''}">${formatNumber(title.total_watched_clicks)}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span>Avg Views/Clip:</span>
                        <span class="font-bold text-gray-100 ${title.avg_views_per_clip === maxAvgViews ? 'text-blue-400' : ''}">${formatNumber(Math.round(title.avg_views_per_clip))}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span>Avg/View Conversion:</span>
                        <span class="font-bold text-gray-100 ${title.avg_per_view_conversion === maxAvgConversion ? 'text-blue-400' : ''}">${title.avg_per_view_conversion.toFixed(3)}</span>
                    </div>
                </div>
            `;
            comparisonCardsContainer.appendChild(card);
        });
    }

    /**
     * Formats a number for better readability (e.g., 1234567 -> 1.23M).
     * @param {number} num The number to format.
     * @returns {string} The formatted string.
     */
    function formatNumber(num) {
        if (num === null || num === undefined) return '0';
        num = Number(num);
        if (num >= 1000000000) return (num / 1000000000).toFixed(1) + 'B';
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
        return num.toString();
    }

    /**
     * Exports the visible table data to a CSV file.
     */
    function exportTableToCsv() {
        const table = document.getElementById('profile-table');
        let csv = [];
        const rows = table.querySelectorAll('tr');

        rows.forEach(row => {
            const rowData = Array.from(row.querySelectorAll('th, td')).map(cell => {
                let text = cell.innerText;
                if (cell.querySelector('.drilldown-link')) {
                    text = cell.querySelector('.drilldown-link').textContent;
                }
                return `"${text.replace(/"/g, '""')}"`;
            });
            csv.push(rowData.join(','));
        });

        const csvContent = "data:text/csv;charset=utf-8," + csv.join("\n");
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "shorts_performance_data.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    
    /**
     * Exports the modal's table data to a CSV file.
     */
    function exportModalTableToCsv() {
        const table = document.getElementById('drilldown-table-container').querySelector('table');
        let csv = [];
        const rows = table.querySelectorAll('tr');
        rows.forEach(row => {
            const rowData = Array.from(row.querySelectorAll('th, td')).map(cell => {
                const text = cell.innerText;
                return `"${text.replace(/"/g, '""')}"`;
            });
            csv.push(rowData.join(','));
        });

        const csvContent = "data:text/csv;charset=utf-8," + csv.join("\n");
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "clips_details.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    
    /**
     * Exports all charts to a single PNG file.
     */
    async function exportChartsToPng() {
        const dashboard = document.querySelector('body');
        const originalBg = dashboard.style.backgroundColor;
        dashboard.style.backgroundColor = '#1a202c'; // Ensure the background is dark for the export
        const chartsToExport = document.querySelectorAll('.chart-box canvas');
        const chartImages = await Promise.all(Array.from(chartsToExport).map(canvas => {
            return new Promise(resolve => {
                const img = new Image();
                img.onload = () => resolve(img);
                img.src = canvas.toDataURL('image/png');
            });
        }));

        const combinedCanvas = document.createElement('canvas');
        const combinedCtx = combinedCanvas.getContext('2d');
        const padding = 20;
        const totalHeight = chartImages.reduce((sum, img) => sum + img.height + padding, 0);
        const maxWidth = Math.max(...chartImages.map(img => img.width));

        combinedCanvas.width = maxWidth + padding * 2;
        combinedCanvas.height = totalHeight;
        combinedCtx.fillStyle = '#2d3748';
        combinedCtx.fillRect(0, 0, combinedCanvas.width, combinedCanvas.height);

        let yOffset = padding;
        chartImages.forEach(img => {
            combinedCtx.drawImage(img, padding, yOffset);
            yOffset += img.height + padding;
        });

        const link = document.createElement('a');
        link.href = combinedCanvas.toDataURL('image/png');
        link.download = 'shorts_performance_charts.png';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        dashboard.style.backgroundColor = originalBg;
    }

</script>
</body>
</html>
